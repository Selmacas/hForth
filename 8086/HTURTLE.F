\
\ HTURTLE.F
\ Turtle graphics package for hForth
\ Words names are in Korean.
\
\ HTURTLE.EXE는 HF86EXE.EXE를 시작한 후 다음 순서로 포스 파일들을 올려서
\ 만든 것입니다.
\
\       << OPTIONAL.F
\       << ASM8086.F
\       << COREEXT.F
\       << MSDOS.F
\       BL PARSE MULTI.F    INCLUDED
\       BL PARSE HIOMULT2.F INCLUDED
\       BL PARSE HTURTLE.F  INCLUDED
\       SAVE-SYSTEM-AS HTURTLE.EXE
\
\ 1996. 2. 21. \ Wonyong Koh

BASE @
GET-ORDER  GET-CURRENT
한글입출력-WORDLIST GET-ORDER 1 + SET-ORDER

MARKER ~TURTLE

DECIMAL
CREATE sin16384
     0 ,    286 ,    572 ,    857 ,   1143 ,   1428 ,	1713 ,	 1997 ,   2280 ,   2563 ,
  2845 ,   3126 ,   3406 ,   3686 ,   3964 ,   4240 ,	4516 ,	 4790 ,   5063 ,   5334 ,
  5604 ,   5872 ,   6138 ,   6402 ,   6664 ,   6924 ,	7182 ,	 7438 ,   7692 ,   7943 ,
  8192 ,   8438 ,   8682 ,   8923 ,   9162 ,   9397 ,	9630 ,	 9860 ,  10087 ,  10311 ,
 10531 ,  10749 ,  10963 ,  11174 ,  11381 ,  11585 ,  11786 ,	11982 ,  12176 ,  12365 ,
 12551 ,  12733 ,  12911 ,  13085 ,  13255 ,  13421 ,  13583 ,	13741 ,  13894 ,  14044 ,
 14189 ,  14330 ,  14466 ,  14598 ,  14726 ,  14849 ,  14968 ,	15082 ,  15191 ,  15296 ,
 15396 ,  15491 ,  15582 ,  15668 ,  15749 ,  15826 ,  15897 ,	15964 ,  16026 ,  16083 ,
 16135 ,  16182 ,  16225 ,  16262 ,  16294 ,  16322 ,  16344 ,	16362 ,  16374 ,  16382 ,
 16384 ,  16382 ,  16374 ,  16362 ,  16344 ,  16322 ,  16294 ,	16262 ,  16225 ,  16182 ,
 16135 ,  16083 ,  16026 ,  15964 ,  15897 ,  15826 ,  15749 ,	15668 ,  15582 ,  15491 ,
 15396 ,  15296 ,  15191 ,  15082 ,  14968 ,  14849 ,  14726 ,	14598 ,  14466 ,  14330 ,
 14189 ,  14044 ,  13894 ,  13741 ,  13583 ,  13421 ,  13255 ,	13085 ,  12911 ,  12733 ,
 12551 ,  12365 ,  12176 ,  11982 ,  11786 ,  11585 ,  11381 ,	11174 ,  10963 ,  10749 ,
 10531 ,  10311 ,  10087 ,   9860 ,   9630 ,   9397 ,	9162 ,	 8923 ,   8682 ,   8438 ,
  8192 ,   7943 ,   7692 ,   7438 ,   7182 ,   6924 ,	6664 ,	 6402 ,   6138 ,   5872 ,
  5604 ,   5334 ,   5063 ,   4790 ,   4516 ,   4240 ,	3964 ,	 3686 ,   3406 ,   3126 ,
  2845 ,   2563 ,   2280 ,   1997 ,   1713 ,   1428 ,	1143 ,	  857 ,    572 ,    286 ,
     0 ,   -286 ,   -572 ,   -857 ,  -1143 ,  -1428 ,  -1713 ,	-1997 ,  -2280 ,  -2563 ,
 -2845 ,  -3126 ,  -3406 ,  -3686 ,  -3964 ,  -4240 ,  -4516 ,	-4790 ,  -5063 ,  -5334 ,
 -5604 ,  -5872 ,  -6138 ,  -6402 ,  -6664 ,  -6924 ,  -7182 ,	-7438 ,  -7692 ,  -7943 ,
 -8192 ,  -8438 ,  -8682 ,  -8923 ,  -9162 ,  -9397 ,  -9630 ,	-9860 , -10087 , -10311 ,
-10531 , -10749 , -10963 , -11174 , -11381 , -11585 , -11786 , -11982 , -12176 , -12365 ,
-12551 , -12733 , -12911 , -13085 , -13255 , -13421 , -13583 , -13741 , -13894 , -14044 ,
-14189 , -14330 , -14466 , -14598 , -14726 , -14849 , -14968 , -15082 , -15191 , -15296 ,
-15396 , -15491 , -15582 , -15668 , -15749 , -15826 , -15897 , -15964 , -16026 , -16083 ,
-16135 , -16182 , -16225 , -16262 , -16294 , -16322 , -16344 , -16362 , -16374 , -16382 ,
-16384 , -16382 , -16374 , -16362 , -16344 , -16322 , -16294 , -16262 , -16225 , -16182 ,
-16135 , -16083 , -16026 , -15964 , -15897 , -15826 , -15749 , -15668 , -15582 , -15491 ,
-15396 , -15296 , -15191 , -15082 , -14968 , -14849 , -14726 , -14598 , -14466 , -14330 ,
-14189 , -14044 , -13894 , -13741 , -13583 , -13421 , -13255 , -13085 , -12911 , -12733 ,
-12551 , -12365 , -12176 , -11982 , -11786 , -11585 , -11381 , -11174 , -10963 , -10749 ,
-10531 , -10311 , -10087 ,  -9860 ,  -9630 ,  -9397 ,  -9162 ,	-8923 ,  -8682 ,  -8438 ,
 -8192 ,  -7943 ,  -7692 ,  -7438 ,  -7182 ,  -6924 ,  -6664 ,	-6402 ,  -6138 ,  -5872 ,
 -5604 ,  -5334 ,  -5063 ,  -4790 ,  -4516 ,  -4240 ,  -3964 ,	-3686 ,  -3406 ,  -3126 ,
 -2845 ,  -2563 ,  -2280 ,  -1997 ,  -1713 ,  -1428 ,  -1143 ,	 -857 ,   -572 ,   -286 ,
    -0 ,    286 ,    572 ,    857 ,   1143 ,   1428 ,	1713 ,	 1997 ,   2280 ,   2563 ,
  2845 ,   3126 ,   3406 ,   3686 ,   3964 ,   4240 ,	4516 ,	 4790 ,   5063 ,   5334 ,
  5604 ,   5872 ,   6138 ,   6402 ,   6664 ,   6924 ,	7182 ,	 7438 ,   7692 ,   7943 ,
  8192 ,   8438 ,   8682 ,   8923 ,   9162 ,   9397 ,	9630 ,	 9860 ,  10087 ,  10311 ,
 10531 ,  10749 ,  10963 ,  11174 ,  11381 ,  11585 ,  11786 ,	11982 ,  12176 ,  12365 ,
 12551 ,  12733 ,  12911 ,  13085 ,  13255 ,  13421 ,  13583 ,	13741 ,  13894 ,  14044 ,
 14189 ,  14330 ,  14466 ,  14598 ,  14726 ,  14849 ,  14968 ,	15082 ,  15191 ,  15296 ,
 15396 ,  15491 ,  15582 ,  15668 ,  15749 ,  15826 ,  15897 ,	15964 ,  16026 ,  16083 ,
 16135 ,  16182 ,  16225 ,  16262 ,  16294 ,  16322 ,  16344 ,	16362 ,  16374 ,  16382 ,
 16384 ,  16382 ,  16374 ,  16362 ,  16344 ,  16322 ,  16294 ,	16262 ,  16225 ,  16182 ,
 16135 ,  16083 ,  16026 ,  15964 ,  15897 ,  15826 ,  15749 ,	15668 ,  15582 ,  15491 ,
 15396 ,  15296 ,  15191 ,  15082 ,  14968 ,  14849 ,  14726 ,	14598 ,  14466 ,  14330 ,
 14189 ,  14044 ,  13894 ,  13741 ,  13583 ,  13421 ,  13255 ,	13085 ,  12911 ,  12733 ,
 12551 ,  12365 ,  12176 ,  11982 ,  11786 ,  11585 ,  11381 ,	11174 ,  10963 ,  10749 ,
 10531 ,  10311 ,  10087 ,   9860 ,   9630 ,   9397 ,	9162 ,	 8923 ,   8682 ,   8438 ,
  8192 ,   7943 ,   7692 ,   7438 ,   7182 ,   6924 ,	6664 ,	 6402 ,   6138 ,   5872 ,
  5604 ,   5334 ,   5063 ,   4790 ,   4516 ,   4240 ,	3964 ,	 3686 ,   3406 ,   3126 ,
  2845 ,   2563 ,   2280 ,   1997 ,   1713 ,   1428 ,	1143 ,	  857 ,    572 ,    286 ,
     0 ,   -286 ,   -572 ,   -857 ,  -1143 ,  -1428 ,  -1713 ,	-1997 ,  -2280 ,  -2563 ,
 -2845 ,  -3126 ,  -3406 ,  -3686 ,  -3964 ,  -4240 ,  -4516 ,	-4790 ,  -5063 ,  -5334 ,
 -5604 ,  -5872 ,  -6138 ,  -6402 ,  -6664 ,  -6924 ,  -7182 ,	-7438 ,  -7692 ,  -7943 ,
 -8192 ,  -8438 ,  -8682 ,  -8923 ,  -9162 ,  -9397 ,  -9630 ,	-9860 , -10087 , -10311 ,
-10531 , -10749 , -10963 , -11174 , -11381 , -11585 , -11786 , -11982 , -12176 , -12365 ,
-12551 , -12733 , -12911 , -13085 , -13255 , -13421 , -13583 , -13741 , -13894 , -14044 ,
-14189 , -14330 , -14466 , -14598 , -14726 , -14849 , -14968 , -15082 , -15191 , -15296 ,
-15396 , -15491 , -15582 , -15668 , -15749 , -15826 , -15897 , -15964 , -16026 , -16083 ,
-16135 , -16182 , -16225 , -16262 , -16294 , -16322 , -16344 , -16362 , -16374 , -16382 ,
-16384 , -16382 , -16374 , -16362 , -16344 , -16322 , -16294 , -16262 , -16225 , -16182 ,
-16135 , -16083 , -16026 , -15964 , -15897 , -15826 , -15749 , -15668 , -15582 , -15491 ,
-15396 , -15296 , -15191 , -15082 , -14968 , -14849 , -14726 , -14598 , -14466 , -14330 ,
-14189 , -14044 , -13894 , -13741 , -13583 , -13421 , -13255 , -13085 , -12911 , -12733 ,
-12551 , -12365 , -12176 , -11982 , -11786 , -11585 , -11381 , -11174 , -10963 , -10749 ,
-10531 , -10311 , -10087 ,  -9860 ,  -9630 ,  -9397 ,  -9162 ,	-8923 ,  -8682 ,  -8438 ,
 -8192 ,  -7943 ,  -7692 ,  -7438 ,  -7182 ,  -6924 ,  -6664 ,	-6402 ,  -6138 ,  -5872 ,
 -5604 ,  -5334 ,  -5063 ,  -4790 ,  -4516 ,  -4240 ,  -3964 ,	-3686 ,  -3406 ,  -3126 ,
 -2845 ,  -2563 ,  -2280 ,  -1997 ,  -1713 ,  -1428 ,  -1143 ,	 -857 ,   -572 ,   -286 ,
    -0 ,    286 ,    572 ,    857 ,   1143 ,   1428 ,	1713 ,	 1997 ,   2280 ,   2563 ,
  2845 ,   3126 ,   3406 ,   3686 ,   3964 ,   4240 ,	4516 ,	 4790 ,   5063 ,   5334 ,
  5604 ,   5872 ,   6138 ,   6402 ,   6664 ,   6924 ,	7182 ,	 7438 ,   7692 ,   7943 ,
  8192 ,   8438 ,   8682 ,   8923 ,   9162 ,   9397 ,	9630 ,	 9860 ,  10087 ,  10311 ,
 10531 ,  10749 ,  10963 ,  11174 ,  11381 ,  11585 ,  11786 ,	11982 ,  12176 ,  12365 ,
 12551 ,  12733 ,  12911 ,  13085 ,  13255 ,  13421 ,  13583 ,	13741 ,  13894 ,  14044 ,
 14189 ,  14330 ,  14466 ,  14598 ,  14726 ,  14849 ,  14968 ,	15082 ,  15191 ,  15296 ,
 15396 ,  15491 ,  15582 ,  15668 ,  15749 ,  15826 ,  15897 ,	15964 ,  16026 ,  16083 ,
 16135 ,  16182 ,  16225 ,  16262 ,  16294 ,  16322 ,  16344 ,	16362 ,  16374 ,  16382 ,

HEX
\ : PLOT  ( x y -- )
\     Y>SEG SWAP 8 /MOD SWAP >R 	  \ seg_addr x/8  R: x_mod_8
\     2DUP LC@ R> CHARS XMASK + C@ OR ROT ROT LC! ;

CODE PLOT  ( x y -- )
    BX 1 SHL,
    Y>SegTable ) BX ADD,
    0 [BX] ES MOV,
    BX POP,
    BX CX MOV,
    BX 1 SHR,
    BX 1 SHR,
    BX 1 SHR,
    ES: 0 [BX] AL MOV,
    1 # AH MOV,
    CL NOT,
    7 # CL AND,
    AH CL ROL,
    AH AL OR,
    ES: AL 0 [BX] MOV,
    BX POP,
    NEXT,
END-CODE

\ : 2ROT
\     >R >R 2SWAP R> R> 2SWAP ;
\
\ : LINE  ( x1 y1 x2 y2--)
\     2OVER 2OVER ROT - ABS >R - ABS R> MAX 2 <
\     IF 2DROP PLOT EXIT THEN
\     2OVER 2OVER ROT + 1+ 2/ >R + 1+ 2/ R>
\     2DUP 2ROT RECURSE RECURSE ;

VARIABLE Delta
VARIABLE Delta/2

\ y changing faster than x
CODE steep640	\ on entry, ax = delta x, bx = delta y, cx=x1, dx=y1
    BX BP MOV,			\ for counter
    BX 1 SHR,
    BX Delta/2 ) MOV,		\ halfy
    BX BX XOR,			\ clear for cmp
6 L:
    BX PUSH,
    CX PUSH,		\ x
    DX BX MOV,
    BX 1 SHL,
    Y>SegTable ) BX ADD,
    0 [BX] ES MOV,
    CX BX MOV,
    BX 1 SHR,
    BX 1 SHR,
    BX 1 SHR,
    ES: 0 [BX] AL MOV,
    1 # AH MOV,
    CL NOT,
    7 # CL AND,
    AH CL ROL,
    AH AL OR,
    ES: AL 0 [BX] MOV,
    CX POP,
    BX POP,
    DX INC,			\ y is always increasing
    MAX-Y 16* # DX CMP,
    8 L# JL,
    DX DX XOR,
8 L:
    Delta ) BX ADD,		\ = bx + delta_y
    Delta/2 ) BX CMP,		\ bx > halfy ?
    7 L# JLE,
    SI BX SUB,			\ bx - delta_y
    DI CX ADD,			\ inc or dec x
    MAX-X 8 * # CX SUB,
    7 L# JNS,
    MAX-X 8 * # CX ADD,
    7 L# JNS,
    MAX-X 8 * # CX ADD,
7 L:
    BP DEC,
    6 L# JGE,
    BP POP,
    SI POP,
    BX POP,
    NEXT,
END-CODE

\ on exit, cx=x1, dx=y1, ax=x2, bx=y2
CODE line640  ( x1 y1 x2 y2 -- )	\ writes to screen directly
    AX POP,
    DX POP,
    CX POP,
    SI PUSH,   ( used to hold direction)
    BP PUSH,   ( used as counter)
\ see if we'll inc or dec x, y (draws in any direction)
    DX BX SUB,			\ bx <- y2-y1 (delta y)
    2 L# JGE,
    BX DX ADD,			\ dx <- y2
    BX NEG,			\ abs(delta y)
    CX AX XCHG,
2 L:
    BX SI MOV,                  \ delta_y(BX) to SI
    CX AX SUB,                  \ x2 - x1 = delta_x
    1 # DI MOV,                 \ di to increment x
    4 L# JGE,
    -1 # DI MOV,                \ di to decrement x
    AX NEG,                     \ abs(delta x)
4 L:
    \ adjust x1(CX), y1(DX) in proper range
    AX PUSH,
    DX PUSH,
    CX AX MOV,
    CWD,
    MAX-X 8 * # BP MOV,
    BP IDIV,
    DX DX OR,
    1 L# JNS,
    BP DX ADD,
1 L:
    DX CX MOV,
    DX POP,
    DX AX MOV,
    CWD,
    MAX-Y 16* # BP MOV,
    BP IDIV,
    DX DX OR,
    8 L# JNS,
    BP DX ADD,
8 L:
    AX POP,
    AX Delta ) MOV,		\ abs(delta x)
    BX AX CMP,			\ delta_x - delta_y
    5 L# JGE,
    ' steep640 # JMP,           \ y changes faster than x
5 L:
\ x changing faster than y
    AX BP MOV,			\ for counter
    AX 1 SHR,
    AX Delta/2 ) MOV,		\ halfx
    BX BX XOR,			\ clear for cmp
6 L:
    BX PUSH,
    CX PUSH,		\ x
    DX BX MOV,
    BX 1 SHL,
    Y>SegTable ) BX ADD,
    0 [BX] ES MOV,
    CX BX MOV,
    BX 1 SHR,
    BX 1 SHR,
    BX 1 SHR,
    ES: 0 [BX] AL MOV,
    1 # AH MOV,
    CL NOT,
    7 # CL AND,
    AH CL ROL,
    AH AL OR,
    ES: AL 0 [BX] MOV,
    CX POP,
    BX POP,
    DI CX ADD,			\ inc or dec x
    MAX-X 8 * # CX SUB,
    9 L# JNS,
    MAX-X 8 * # CX ADD,
    9 L# JNS,
    MAX-X 8 * # CX ADD,
9 L:
    SI BX ADD,			\ = bx + delta_y
    Delta/2 ) BX CMP,		\ bx > halfx ?
    7 L# JLE,
    Delta ) BX SUB,		\ bx - delta_x
    DX INC,			\ y is always increasing
    MAX-Y 16* # DX CMP,
    7 L# JL,
    DX DX XOR,
7 L:
    BP DEC,
    6 L# JGE,
    BP POP,
    SI POP,
    BX POP,
    NEXT,
END-CODE

\ y changing faster than x
CODE xsteep640   \ on entry, ax = delta x, bx = delta y, cx=x1, dx=y1
    BX BP MOV,			\ for counter
    BX 1 SHR,
    BX Delta/2 ) MOV,		\ halfy
    BX BX XOR,			\ clear for cmp
6 L:
    BX PUSH,
    CX PUSH,		\ x
    DX BX MOV,
    BX 1 SHL,
    Y>SegTable ) BX ADD,
    0 [BX] ES MOV,
    CX BX MOV,
    BX 1 SHR,
    BX 1 SHR,
    BX 1 SHR,
    ES: 0 [BX] AL MOV,
    1 # AH MOV,
    CL NOT,
    7 # CL AND,
    AH CL ROL,
    AH AL XOR,
    ES: AL 0 [BX] MOV,
    CX POP,
    BX POP,
    DX INC,			\ y is always increasing
    MAX-Y 16* # DX CMP,
    8 L# JL,
    DX DX XOR,
8 L:
    Delta ) BX ADD,		\ = bx + delta_y
    Delta/2 ) BX CMP,		\ bx > halfy ?
    7 L# JLE,
    SI BX SUB,			\ bx - delta_y
    DI CX ADD,			\ inc or dec x
    MAX-X 8 * # CX SUB,
    7 L# JNS,
    MAX-X 8 * # CX ADD,
    7 L# JNS,
    MAX-X 8 * # CX ADD,
7 L:
    BP DEC,
    6 L# JGE,
    BP POP,
    SI POP,
    BX POP,
    NEXT,
END-CODE

\ on exit, cx=x1, dx=y1, ax=x2, bx=y2
CODE xline640  ( x1 y1 x2 y2 -- )        \ writes to screen directly
    AX POP,
    DX POP,
    CX POP,
    SI PUSH,   ( used to hold direction)
    BP PUSH,   ( used as counter)
\ see if we'll inc or dec x, y (draws in any direction)
    DX BX SUB,			\ bx <- y2-y1 (delta y)
    2 L# JGE,
    BX DX ADD,			\ dx <- y2
    BX NEG,			\ abs(delta y)
    CX AX XCHG,
2 L:
    BX SI MOV,                  \ delta_y(BX) to SI
    CX AX SUB,                  \ x2 - x1 = delta_x
    1 # DI MOV,                 \ di to increment x
    4 L# JGE,
    -1 # DI MOV,                \ di to decrement x
    AX NEG,                     \ abs(delta x)
4 L:
    \ adjust x1(CX), y1(DX) in proper range
    MAX-X 8 * # CX SUB,
    1 L# JNS,
    MAX-X 8 * # CX ADD,
    1 L# JNS,
    MAX-X 8 * # CX ADD,
1 L:
    MAX-Y 16* # DX SUB,
    8 L# JNS,
    MAX-Y 16* # DX ADD,
    8 L# JNS,
    MAX-Y 16* # DX ADD,
8 L:
    AX Delta ) MOV,		\ abs(delta x)
    BX AX CMP,			\ delta_x - delta_y
    5 L# JGE,
    ' xsteep640 # JMP,          \ y changes faster than x
5 L:
\ x changing faster than y
    AX BP MOV,			\ for counter
    AX 1 SHR,
    AX Delta/2 ) MOV,		\ halfx
    BX BX XOR,			\ clear for cmp
6 L:
    BX PUSH,
    CX PUSH,		\ x
    DX BX MOV,
    BX 1 SHL,
    Y>SegTable ) BX ADD,
    0 [BX] ES MOV,
    CX BX MOV,
    BX 1 SHR,
    BX 1 SHR,
    BX 1 SHR,
    ES: 0 [BX] AL MOV,
    1 # AH MOV,
    CL NOT,
    7 # CL AND,
    AH CL ROL,
    AH AL XOR,
    ES: AL 0 [BX] MOV,
    CX POP,
    BX POP,
    DI CX ADD,			\ inc or dec x
    MAX-X 8 * # CX SUB,
    9 L# JNS,
    MAX-X 8 * # CX ADD,
    9 L# JNS,
    MAX-X 8 * # CX ADD,
9 L:
    SI BX ADD,			\ = bx + delta_y
    Delta/2 ) BX CMP,		\ bx > halfx ?
    7 L# JLE,
    Delta ) BX SUB,		\ bx - delta_x
    DX INC,			\ y is always increasing
    MAX-Y 16* # DX CMP,
    7 L# JL,
    DX DX XOR,
7 L:
    BP DEC,
    6 L# JGE,
    BP POP,
    SI POP,
    BX POP,
    NEXT,
END-CODE

DECIMAL
10 CONSTANT scale
0 VALUE 내린붓?
VARIABLE 방향
MAX-X 8 * 2/ VALUE xOffset
MAX-Y 16 * 2/ VALUE yOffset
VARIABLE xCoord  xOffset xCoord !
VARIABLE yCoord  yOffset yCoord !

: 붓들어 ( -- )     FALSE TO 내린붓? ;
: 붓내려 ( -- )     TRUE  TO 내린붓? ;
: 줄화면 ( y -- )   MAX-Y SWAP - TO YTop ;
: 온화면 ( -- )     PAGE ;

CODE sin* ( 거리 각도 -- 거리*sin[각도] )
\ : sin*   CELLS sin16384 + @ M* 16384 SM/REM NIP ;
    BX 1 SHL,
    sin16384 [BX] BX MOV,
    AX POP,
    BX IMUL,
    BX BX XOR,
    AX 1 SHL,
    DX 1 RCL,
    AX 1 SHL,
    DX 1 RCL,
    DX BX ADC,
    NEXT,
END-CODE

CODE cos* ( 거리 각도 -- 거리*cos[각도] )
\ : cos*   90 + CELLS sin16384 + @ M* 16384 SM/REM NIP ;
    90 # BX ADD,
    BX 1 SHL,
    sin16384 [BX] BX MOV,
    AX POP,
    BX IMUL,
    BX BX XOR,
    AX 1 SHL,
    DX 1 RCL,
    AX 1 SHL,
    DX 1 RCL,
    DX BX ADC,
    NEXT,
END-CODE

: 로.그어 ( x y -- )
    scale / yOffset SWAP -	    \ x y1
    SWAP scale / xOffset + SWAP     \ x1 y1
    내린붓? IF 2DUP xCoord @ yCoord @ line640 THEN
    yCoord !  xCoord ! ;

: 거북보여 ( -- )
    xCoord @  8 방향 @ 270 + sin* +
    yCoord @  8 방향 @ 270 + cos* -
    2DUP xCoord @ yCoord @ xline640                 \ x1 y1
    xCoord @  16 방향 @ sin* +
    yCoord @  16 방향 @ cos* -                      \ x1 y1 x2 y2
    2SWAP 2OVER xline640                            \ x2 y2
    xCoord @  8 방향 @ 90 + sin* +
    yCoord @  8 방향 @ 90 + cos* -                  \ x2 y2 x3 y3
    2SWAP 2OVER xline640                            \ x3 y3
    xCoord @  yCoord @  xline640 ;

: 화면지워 ( -- )   YTop PAGE 0 OVER AT-XY TO YTop 거북보여 ;

HEX
: 같은말 ( xt 'name2' -- )
    DUP xt>name ?DUP 0= IF -12 THROW THEN
    SWAP head, linkLast
    C@ DUP
    040 AND IF IMMEDIATE    THEN
    020 AND IF COMPILE-ONLY THEN ;

DECIMAL
' IMMEDIATE  같은말  바로
' RECURSE    같은말  되불러
' IF         같은말  면
' ELSE       같은말  아니면
' THEN       같은말  라
' BEGIN      같은말  이제부터
' UNTIL      같은말  까지
' WHILE      같은말  동안
' REPEAT     같은말  거듭해
' DO         같은말  맴
' LOOP       같은말  돌아
' I          같은말  가
' CONSTANT   같은말  굳은값
' VARIABLE   같은말  무른값
' DUP        같은말  베껴
' OVER       같은말  건너
' DROP       같은말  버려
' SWAP       같은말  바꿔
' ROT        같은말  돌려
' >R         같은말  >되
' R>         같은말  되>
' R@         같은말  되@
' AND        같은말  낱함께
' OR         같은말  낱아울러
' XOR        같은말  낱따로
' MOD        같은말  나머지
' CR         같은말  다음줄
' WORDS      같은말  말펴
' .S         같은말  .더미

' THEN       같은말  ENDIF
' =          같은말  ==
' BYE        같은말  끝
' BYE        같은말  EXIT
' BYE        같은말  exit

무른값 가로위치
무른값 세로위치

: 제자리로   ( -- )
	거북보여
	0 방향 !
	0 가로위치 !
	0 세로위치 !
	0 0 로.그어
	거북보여 ;

: 화면지워   ( -- )
	붓들어 제자리로 화면지워 붓내려 ;

: 쪼갠화면 ( -- )    8 줄화면  화면지워 ;
: 온화면   ( -- )    온화면    화면지워 ;

: 도.오른쪽  ( 각도 -- )
	거북보여
	방향 @ +
	베껴 0 < 면		     ( 각도가 0보다 작으면)
		   이제부터 360 +    ( 0 이상이 될 때까지 360을 더함)
		   베껴 -1 > 까지
		 아니면 360 나머지   ( 0보다 크면 360으로 나눈 나머지를 남김)
		 라
	방향 !
	거북보여 ;

: 도.왼쪽     -1 * 도.오른쪽 ;

: 만큼.가    ( dx dy -- )
	거북보여
	세로위치 @ +		( dx y+dy )
	베껴 세로위치 ! 	( dx y+dy )
	바꿔 가로위치 @ +	( y+dy x+dx )
	베껴 가로위치 ! 	( y+dy x+dx )
	바꿔			( x+dx y+dy )
	로.그어
	거북보여 ;

: 앞으로   ( l -- )
	베껴			( l l )
	방향 @ sin*		( l dx )
	바꿔			( dx l )
	방향 @ cos*		( dx dy )
	만큼.가  ;

: 뒤로	   ( 거리 -- )
	-1 *  앞으로 ;

: __오른쪽.활꼴   ( 거리 횟수  -- )
	0 맴   5 도.오른쪽   베껴 앞으로  5 도.오른쪽	돌아   버려 ;

: 오른쪽.활꼴	( 반지름 각도 -- )
	바꿔  355 2034 */	( 각도 거리 ) ( 활꼴을 10도씩 나누어 그림 )
					( 2*pi*r*각도/360*10 = pi*r*각도/18 )
					( pi = 355/113 = 3.141593 )
	베껴 >되			( 되돌이 더미에 거리를 갈무리)
	건너  10 /		( 각도 거리 횟수 )
	__오른쪽.활꼴		( 각도 )
	10 나머지		( 각도_나머지 )
	베껴 되>		( 각도_나머지 각도_나머지 거리 )
	( 10으로 나눈 나머지 각도에 해당하는 거리만큼 앞으로 감)
	*  10 /  앞으로 	( 각도_나머지 )
	도.오른쪽  ;

: 오른쪽.원 ( 반지름 -- )   360 오른쪽.활꼴 ;

: __왼쪽.활꼴	( 거리 횟수  -- )
	0 맴   5 도.왼쪽   베껴 앞으로	5 도.왼쪽   돌아   버려 ;

: 왼쪽.활꼴	( 반지름 각도 -- )
	바꿔  355 2034 */	( 각도 거리 ) ( 활꼴을 10도씩 나누어 그림 )
					( 2*pi*r*각도/360*10 = pi*r*각도/18 )
	베껴 >되			( 되돌이 더미에 거리를 갈무리)
	건너  10 /		( 각도 거리 횟수 )
	__왼쪽.활꼴		( 각도 )
	10 나머지		( 각도_나머지 )
	베껴 되>		( 각도_나머지 각도_나머지 거리 )
	     ( 10으로 나눈 나머지 각도에 해당하는 거리만큼 앞으로 감)
	*  10 /  앞으로 	( 각도_나머지 )
	도.왼쪽  ;

: 왼쪽.원 ( 반지름 -- )   360 왼쪽.활꼴 ;

: 네모	 ( 크기 -- )
	4 0  맴   베껴 앞으로	90 도.오른쪽   돌아   버려 ;

: 겹친네모   ( -- )
	100 네모  200 네모  300 네모  400 네모 ;

: 다이아몬드   ( -- )
	45 도.오른쪽
	4 0 맴	겹친네모  90 도.오른쪽	돌아 ;

: 깃발	 ( 크기 -- )
	베껴 앞으로  베껴 네모	뒤로 ;

: 여섯깃발   ( 크기 -- )
	6 0 맴	베껴 깃발  60 도.오른쪽  돌아 ;

: 바람개비   ( -- )
	100 여섯깃발  400 여섯깃발 ;

: 꽃잎	 ( 크기 -- )
	베껴  90 오른쪽.활꼴  90 도.오른쪽
	      90 오른쪽.활꼴  90 도.오른쪽 ;

: 꽃	 ( 크기 -- )
	8 0 맴	 베껴  꽃잎 45 도.오른쪽   돌아   버려 ;

: 다른꽃잎   ( 크기 -- )
	베껴  60 오른쪽.활꼴  120 도.오른쪽
	      60 오른쪽.활꼴  120 도.오른쪽 ;

: 다른꽃     ( 크기 -- )
	6 0 맴	 베껴  다른꽃잎 60 도.오른쪽   돌아   버려 ;

: 햇살	 ( 크기 -- )
	베껴  90 왼쪽.활꼴  베껴 90 오른쪽.활꼴
	베껴  90 왼쪽.활꼴	 90 오른쪽.활꼴 ;

: 해	 ( 크기 -- )
	9 0 맴	 베껴 햇살  160 도.오른쪽   돌아  버려 ;

: 각형	   ( 크기 모서리수 -- )
	360 건너 /  바꿔	( 크기 돌_각도 모서리수 )
	0 맴  건너 앞으로  베껴 도.오른쪽  돌아
	버려 버려 ;

: 별   ( 변의_수 몇번 -- )
	건너 건너 *
	0 맴  600 앞으로  건너 건너 360 * 바꿔 / 도.오른쪽  돌아
	버려 버려 ;

: 다각형   ( 크기 각도 -- )
	방향 @ >되		      ( 되돌이더미에 처음 방향을 갈무리)
	이제부터
	   건너 앞으로 베껴 도.오른쪽
	방향 @	되@ = 까지	      ( 방향이 처음방향과 같아질 때까지 되풀이)
	버려 버려  되> 버려 ;	      ( 값더미와 되돌이 더미를 청소 )

: 다각형자랑5	 5 0 맴  450  72 다각형  72 도.오른쪽  돌아 ;
: 다각형자랑4	 4 0 맴  700 135 다각형  90 도.오른쪽  돌아 ;
: 다각형자랑12	12 0 맴  15 도.오른쪽  붓들어  400 앞으로  붓내려
			 200 135 다각형  15 도.오른쪽  돌아 ;

: 나무	 ( 가지각도 가지길이 가지치기수 -- )
	>되				( 가지치기수를 되돌이더미에 갈무리)
	되@ 면				( '되@ 0 <> 면' 과 같음)
	   건너 도.왼쪽
	   베껴 2 * 앞으로
	   건너 건너 되@ 1 - 되불러
	   베껴 2 * 뒤로
	   건너 2 * 도.오른쪽
	   베껴 앞으로
	   건너 건너 되@ 1 - 되불러
	   뒤로  도.왼쪽
	아니면	버려 버려 라
	되> 버려 ;

무른값 비늘크기  20 비늘크기 !
: 용   ( 나이 -- )
	베껴  0 = 면  비늘크기 @ 앞으로
	      아니면  베껴  0 > 면  베껴 1 - 되불러	(  나이-1 용 )
				    90 도.오른쪽
				    1 건너 - 되불러	(  1-나이 용 )
			    아니면  -1 건너 - 되불러	( -1-나이 용 )
				    90 도.왼쪽
				     1 건너 + 되불러	(  1+나이 용 )
	      라  라
	버려 ;

: 인사말
    쪼갠화면
    ." '늘품'으로 짠 거북그림 프로그램을 시작합니다."              다음줄 다음줄
    ." 시킴말들을 보려면             '말펴'           라고 치시고"  다음줄
    ." 시킴말을 어떻게 쓰는지 보려면 '도움말 도움말'  처럼 치시고"  다음줄
    ." DOS로 돌아 가려면             '끝'           이라고 치십시오." 다음줄
    ." 그림과 글자를 같이 보려면 '온화면' 따로 보려면 '쪼갠화면'이라고 치십시오"
    다음줄
    붓내려
    300 꽃  450 꽃  600 꽃
    붓들어  90 도.왼쪽  2000 앞으로  붓내려
    900 다른꽃  700 다른꽃  500 다른꽃
    붓들어  4000 뒤로  90 도.오른쪽  붓내려
    300 해
    1 글쇠입력상태 ! ;       \ 한글입력

인사말

: TURTLE-hi
    DOSCommand>PAD
    GET-MODE TO OldMode# HGRAPHIC hi
    ." 의견과 제안과 비평을 하이텔 wykoh로 보내 주십시오." CR
    S" BLOCKS.BLK" MAPPED-TO-BLOCK
    인사말  QUIT ;

' TURTLE-hi TO 'boot

( 다음을 차례로 시켜보십시오. )
( 다이아몬드 )
( 400 깃발  400 여섯깃발  바람개비 )
( 400 3 각형   400 5 각형   400 7 각형 )
( 5 2 별  7 2 별  7 3 별  8 3 별  9 2 별  9 4 별  10 3 별  11 3 별  11 5 별 )
( 다각형자랑5 )
( 다각형자랑5 )
( 다각형자랑12 )
( 30 400 4 나무 )
( 20 250 5 나무 )
( 20 250 6 나무 )
( 50 비늘크기 !   9 용 )
( 20 비늘크기 !  12 용 )

SET-CURRENT  SET-ORDER
BASE !
