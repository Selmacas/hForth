All CORE EXT words except obsolescent ones and [COMPILE] (for which
POSTPONE must be used in new ANS Standard program) are provided in
OPTIONAL.F and COREEXT.F. Complete DOUBLE and DOUBLE EXT words are
provided in DOUBLE.F. Gordon Chlarlton's MEMORY.FTH is adapted to
provide MEMORY ALLOCATION words. Many useful programs were added
including more complete Turtle Graphics and serial communication
program.

The usage of user-callable words are described in the beginning of
some sources such as LOG.F, DOSEXEC.F, etc.

In-line compilation of CONSTANT, VARIABLE and CREATEd words as
literal values can increase execution speed especially for
native-code Forth compilers. To provide special compilation action
for this default compilation behavior, I devised a solution.
CONSTANT, VARIABLE and CREATEd words have a mark and execution token
of special compilation action. If Forth compiler sees the mark, it
pushes the execution token of the words and execute the special
compilation action. (CORE word POSTPONE must also find this action
and compile the special compilation action accordingly.) Special
compilation action can be added to a new data structure using only
two words, implementation-dependent 'doCompiles>' and
implementation-independent 'compile>'.

    : doCompiles>
        \ verify the last word is ready for special compilation action
        \ attach special compilation action to the word
        ;

    \  compiles>  ( xt -- )
    \           Assign xt as special compilation action of the last CREATEd
    \           word. It is the user's responsibility to match the special
    \           compilation action and the execution action.
    \       Example: '2CONSTANT' can be defined as following:
    \       :NONAME   EXECUTE POSTPONE 2LITERAL ;
    \       : 2CONSTANT   CREATE SWAP , , compiles> DOES> DUP @ SWAP CELL+ @ ;
    : compiles> POSTPONE LITERAL POSTPONE doCompiles> ; IMMEDIATE

These words are used for example to define 2CONSTANT:

    :NONAME   EXECUTE POSTPONE 2LITERAL ;
    : 2CONSTANT   CREATE SWAP , , compiles> DOES> DUP @ SWAP CELL+ @ ;

I beleive that this solution is general enough to be applied to
other Forth systems.

I gave up the pin-hole optimization tried in version 0.9.6. It had
some bugs and building one in assembly source seems to be too much
work. I might try again when hForth metacompiler is available.

Changes from 0.9.6

1996. 2. 10.
      Revise FM/MOD and SM/REM to catch result-out-of-range error in
              '80000. 2 FM/MOD'.
1996. 1. 19.
      Rename 'x,' to 'code,'; 'x@' to 'code@'; 'x!' to 'code!';
              'xb@' to 'codeB@' and 'xb!' to 'codeB!'.
1996. 1. 7
      Rename non-Standard 'parse-word' to PARSE-WORD.
1995. 12. 2
      Drop '?doLIST' and revise 'optiCOMPILE,'.
1995. 11. 28
      Drop 'LIT,:' all together.
      Return CELLS to non-IMMEDIATE definition.

Changes from 0.9.5

1995. 11. 27.
    In ASM8086.F
    ';CODE' is redefined following the change of 'DOES>' and 'doCREATE'.
1995. 11. 25.
    Add RETRY described by Dr. Astle in Forth Dimensions 17(4), 19-21 (1995).
1995. 11. 25.
    Make 'lastXT' VALUE word.
1995. 11. 24.
    For RAM model only
        Replace 'xhere' with HERE.
        Revise doVALUE, VALUE, TO, and all $VALUE macros.
1995. 11. 23.
    Revise doCREATE, CREATE, pipe, DOES>, and >BODY.
    'pipe' is no longer processor-dependent.
1995. 11. 17.
    Move ERASE to ASM8086.F.
